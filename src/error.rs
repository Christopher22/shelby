use rocket::{
    http::{ContentType, Status},
    response::Responder,
    serde::json::Json,
    Request, Response,
};
use rocket_dyn_templates::{context, Template};

#[derive(Debug, PartialEq)]
pub enum Error {
    DatabaseError(crate::backend::database::Error),
    NotFound,
    ConstraintViolation,
    WrongPassword,
    /// An error generated by an error handler.
    OtherError(rocket::http::Status),
}

impl Error {
    /// Generate the error
    fn generate_error<'r, 'o>(
        req: &'r rocket::Request<'_>,
        code: Status,
        details: impl AsRef<str>,
    ) -> rocket::response::Result<'o> {
        let response = match req.content_type() {
            Some(value) if value.0.is_json() => Json(details.as_ref()).respond_to(&req),
            _ => Template::render("error", context! { error: details.as_ref() }).respond_to(&req),
        };

        // Set the corresponding code
        response.map(|mut value| {
            value.set_status(code);
            value
        })
    }
}

impl From<rocket::http::Status> for Error {
    fn from(value: rocket::http::Status) -> Self {
        Error::OtherError(value)
    }
}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            Error::DatabaseError(error) => write!(f, "database error: {}", error),
            Error::NotFound => write!(f, "element not found"),
            Error::ConstraintViolation => write!(f, "invalid value"),
            Error::WrongPassword => write!(f, "invalid password"),
            Error::OtherError(error) => f.write_str(error.reason_lossy()),
        }
    }
}

impl From<crate::backend::database::Error> for Error {
    fn from(value: crate::backend::database::Error) -> Self {
        match value.is_constraint_violation() {
            true => Error::ConstraintViolation,
            false => Error::DatabaseError(value),
        }
    }
}

impl std::error::Error for Error {}

impl<'r, 'o: 'r> Responder<'r, 'o> for Error {
    fn respond_to(self, request: &'r rocket::Request<'_>) -> rocket::response::Result<'o> {
        let details: String = format!("{}", self);
        Error::generate_error(
            request,
            match self {
                Error::ConstraintViolation => Status::BadRequest,
                Error::DatabaseError(database_error) => {
                    eprintln!("{}", database_error);
                    Status::InternalServerError
                }
                Error::NotFound => Status::NotFound,
                Error::WrongPassword => Status::Unauthorized,
                Error::OtherError(error) => error,
            },
            details,
        )
    }
}

#[catch(default)]
pub async fn error_handler(status: rocket::http::Status, _: &rocket::Request<'_>) -> Error {
    status.into()
}

#[cfg(test)]
mod tests {
    use crate::rocket;
    use rocket::local::blocking::Client;

    #[test]
    fn test_error_catching_json() {
        let client = Client::tracked(rocket()).expect("valid client");
        let response = client
            .get("/invalid_page")
            .header(rocket::http::ContentType::JSON)
            .dispatch();

        assert_eq!(response.status(), rocket::http::Status::NotFound);
        assert_eq!(
            response.content_type(),
            Some(rocket::http::ContentType::JSON)
        );

        let response = response.into_string().expect("valid str");
        rocket::serde::json::from_str::<String>(&response).expect("valid json");
    }

    #[test]
    fn test_error_catching_html() {
        let client = Client::tracked(rocket()).expect("valid client");
        let response = client
            .get("/invalid_page")
            .header(rocket::http::ContentType::HTML)
            .dispatch();

        assert_eq!(response.status(), rocket::http::Status::NotFound);
        assert_eq!(
            response.content_type(),
            Some(rocket::http::ContentType::HTML)
        );

        let response = response.into_string().expect("valid str");
        assert!(response.contains("<body"))
    }
}
